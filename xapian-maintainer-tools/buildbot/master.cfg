# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

xapian_svn_root = 'svn://svn.xapian.org/xapian/'
tarball_root = "http://oligarchy.co.uk/xapian/trunk/"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

import passwords

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave(h, passwords.slave[h], max_builds=1) for h in (
        "linux_i686_earlgrey",
        "win32_mongoose",
        "macos_broteas",
        "cygwin_lemurlaptop",
        "cygwin_mongoose",
        "gentoo_jbergstroem",
        "fbsd9_jbergstroem",
        "linux_ojwb",
    )]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = [SVNPoller(
    svnurl=xapian_svn_root,
    split_file = lambda path: ('trunk', path),
    pollinterval=60, histmax=100
)]

from tarsource import TarPoller
c['change_source'].append(TarPoller(tarball_root, branch='tar', archives=('xapian-core', 'xapian-omega', 'xapian-bindings'), pollinterval=60))

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

#from buildbot.changes.filter import ChangeFilter
#trunk_filter = ChangeFilter(branch="trunk")

from buildbot.schedulers.basic import SingleBranchScheduler
c['schedulers'] = []

c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_quick",
    branch='trunk',
    builderNames=['xapian head update linux amd64'],
    treeStableTimer=70))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_tar",
    branch="tar",
    builderNames=['xapian tar macos', "xapian tar freebsd9", "xapian tar gentoo", "xapian tar linux ojwb"],
    treeStableTimer=0))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_tar_1hr",
    branch="tar",
    builderNames=["xapian tar gentoo nochert"],
    treeStableTimer=60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_tar_2hr",
    branch="tar",
    builderNames=["xapian tar gentoo nobrass"],
    treeStableTimer=60*60*2))

#c['schedulers'].append(SingleBranchScheduler(
#    name="xapian_svn_slow",
#    branch='trunk',
#    treeStableTimer=15*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_1hr",
    branch='trunk',
    builderNames=['xapian head update log assert linux amd64',
                  'xapian head update macos',
                  'xapian head update clang linux amd64'],
    treeStableTimer=60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_2hr",
    branch='trunk',
    builderNames=['xapian head update glibcxxdebug linux amd64'],
    treeStableTimer=60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_3hr",
    branch='trunk',
    builderNames=['xapian head update linux i686'],
    treeStableTimer=3*60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_4h",
    branch='trunk',
    builderNames=['xapian head update assert linux amd64'],
    treeStableTimer=4*60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_5h",
    branch='trunk',
    builderNames=['xapian head update log linux amd64',
                  'xapian head update -Os linux amd64'],
    treeStableTimer=5*60*60))
#c['schedulers'].append(SingleBranchScheduler(
#    name="xapian_svn_veryslow4",
#    branch='trunk',
#    treeStableTimer=6*60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_veryslow5",
    branch='trunk',
    builderNames=['xapian head update valgrind linux amd64',
                  'xapian head update lcov linux amd64'],
    treeStableTimer=7*60*60))


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

cvsroot = ":pserver:anonymous@cvs.sourceforge.net:/cvsroot/buildbot"
cvsmodule = "buildbot"

from xapian_factories import *
#from buildbot.config import BuilderConfig

c['builders'] = [
    {
    'name': 'xapian head update linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_updated_factory2(xapian_svn_root, ["--without-java"]),
    'builddir': 'xapian_head_update_linux_amd64',
    },
    {
    'name': 'xapian head update assert linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["--enable-assertions=yes", "--without-java"]),
    'builddir': 'xapian_head_update_assert_linux_amd64',
    },
    {
    'name': 'xapian head update log linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["--enable-log=yes", "--without-java"]),
    'builddir': 'xapian_head_update_log_linux_amd64',
    },

    {
    'name': 'xapian head update glibcxxdebug linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["CPPFLAGS=-D_GLIBCXX_DEBUG", "--without-java"]),
    'builddir': 'xapian_head_update_glibcxxdebug_linux_amd64',
    },
 
    {
    'name': 'xapian head update log assert linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["--enable-assertions=yes", "--enable-log=yes", "--without-java"]),
    'builddir': 'xapian_head_update_log_assert_linux_amd64',
    },

    {
    'name': 'xapian head update linux i686',
    'slavename': 'linux_i686_earlgrey',
    'factory': svn_updated_factory(xapian_svn_root),
    'builddir': 'xapian_head_update_linux_i686',
    },
    {
    'name': 'xapian head update macos',
    'slavename': 'macos_broteas',
    'factory': svn_updated_factory(xapian_svn_root, usedocs=False, clean=True),
    'builddir': 'xapian_head_update_macos',
    },
    {
    'name': "xapian head update valgrind linux amd64",
    'slavename': 'linux_ojwb',
    'factory': svn_updated_valgrind_factory(xapian_svn_root, ["--without-java"]),
    'builddir': "xapian_head_update_valgrind_linux_amd64",
    },
    {
    'name': "xapian head update lcov linux amd64",
    'slavename': 'linux_ojwb',
    'factory': svn_updated_lcov_factory(xapian_svn_root),
    'builddir': "xapian_head_update_lcov_linux_amd64",
    },
    {
    'name': "xapian tar macos",
    'slavename': 'macos_broteas',
    'factory': tarball_updated_factory(tarball_root),
    'builddir': "xapian_tar_macos",
    },
    {
    'name': "xapian tar gentoo",
    'slavename': 'gentoo_jbergstroem',
    'factory': tarball_updated_factory(tarball_root, configure_opts=["--without-java"]),
    'builddir': "xapian_tar_gentoo",
    },
    {
    'name': "xapian tar gentoo nochert",
    'slavename': 'gentoo_jbergstroem',
    'factory': tarball_updated_factory(tarball_root, configure_opts=["--without-java", "--disable-backend-chert"]),
    'builddir': "xapian_tar_gentoo_nochert",
    },
    {
    'name': "xapian tar gentoo nobrass",
    'slavename': 'gentoo_jbergstroem',
    'factory': tarball_updated_factory(tarball_root, configure_opts=["--without-java", "--disable-backend-brass"]),
    'builddir': "xapian_tar_gentoo_nobrass",
    },
    {
    'name': "xapian tar freebsd9",
    'slavename': 'fbsd9_jbergstroem',
    'factory': tarball_updated_factory(tarball_root),
    'builddir': "xapian_tar_freebsd9",
    },
    {
    'name': "xapian tar linux ojwb",
    'slavename': 'linux_ojwb',
    'factory': tarball_updated_factory(tarball_root),
    'builddir': "xapian_tar_linux_ojwb",
    },
    {
    'name': 'xapian head update -Os linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["CFLAGS=-Os", "CXXFLAGS=-Os"]),
    'builddir': 'xapian_head_update_-Os_linux_amd64',
    },
    {
    'name': 'xapian head update clang linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["CC=clang", "CXX=clang++"]),
    'builddir': 'xapian_head_update_clang_linux_amd64',
    },
 

]

### FIXME: more builders...

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010))

#c['status'].append(html.Waterfall(http_port=8010))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
#from buildbot.status import words
import words # Use our own fixed version
c['status'].append(words.IRC(host="irc.freenode.net", nick="xapian-buildbot",
                             password=passwords.irc,
			     allowForce=True,
                             channels=["#xapian-devel"]))

# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'change_source' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Xapian"
c['projectURL'] = "http://xapian.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.xapian.org/"
